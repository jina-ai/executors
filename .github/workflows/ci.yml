name: CI

on: [pull_request]

jobs:
  prep-testbed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: changed-files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash scripts/get-all-test-paths.sh)"
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all }}
      - id: debug
        run: |
          echo ${{ steps.set-matrix.outputs.matrix }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  unit-tests:
    needs: [prep-testbed]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: debug
        run: echo ${{ matrix.test-path }}
      - name: run unit tests
        run: |
          bash ./scripts/tests.sh ${{ matrix.test-path }}

  docker-tests:
    needs: [prep-testbed]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: debug
        run: echo ${{ matrix.test-path }}
      - name: run docker tests
        run: |
          bash ./scripts/test_docker.sh ${{ matrix.test-path }}

  # always run
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: run integration tests
        run: ./scripts/integration.sh

  gpu-folders:
    runs-on: [self-hosted, gpu]
    steps:
      - name: Change dir owner to working user
        run: sudo chown -R $USER:$USER $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
      - id: changed-files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true
      - id: set-matrix
        run: bash scripts/get-gpu-executors.sh
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  gpu-tests:
    needs: [gpu-folders]
    runs-on: [self-hosted, gpu]
    strategy:
      fail-fast: false
      matrix:
        folder: ${{fromJson(needs.gpu-folders.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.folder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: debug
        run: echo ${{ matrix.folder }}
      - name: build docker image
        run: |
          export IMAGE_NAME=$(echo "${PWD##*/}:gpu" | tr '[:upper:]' '[:lower:]')
          docker build -t $IMAGE_NAME -f Dockerfile.gpu .
      - name: start container
        run: |
          docker run \
            --entrypoint "" \
            --name $IMAGE_NAME \
            --gpus all \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            -d $IMAGE_NAME tail -F /dev/null
          export DOCKER_EXEC="docker exec $IMAGE_NAME"
      - name: Install Docker CLI in container
        run: |
          $DOCKER_EXEC apt update
          $DOCKER_EXEC apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          $DOCKER_EXEC curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          $DOCKER_EXEC add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          $DOCKER_EXEC apt update && apt install docker-ce-cli
      - name: run tests in container
        run: |
          $DOCKER_EXEC pip install -r tests/requirements.txt
          $DOCKER_EXEC pytest -s -v -m gpu tests/
      - name: stop container
        if: ${{ always() }}
        run: docker stop $(docker ps -a -q) && docker rm $IMAGE_NAME

  success-all-test:
    needs: [integration-tests, unit-tests, docker-tests, gpu-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
