name: CI

on: [pull_request]

jobs:
  prep-testbed:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: changed-files
        uses: jitterbit/get-changed-files@v1
        continue-on-error: true
      - id: set-matrix
        run: bash scripts/get-all-test-paths.sh
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.added_modified }}
      - id: debug
        run: echo ${{ steps.set-matrix.outputs.matrix }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  linting:
    needs: [prep-testbed]
    runs-on: ubuntu-latest
    if: ${{ needs.prep-testbed.outputs.matrix != '[]' && needs.prep-testbed.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        executor-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install requirements
        run: pip install black flake8 isort
      - name: Flake8 linting
        run: flake8 ${{ matrix.executor-path }}
      - name: Check imports using isort
        run: isort --check-only ${{ matrix.executor-path }}
      - name: Black check formatting
        run: black --check ${{ matrix.executor-path }}

  unit-tests:
    needs: [prep-testbed]
    runs-on: ubuntu-latest
    if: ${{ needs.prep-testbed.outputs.matrix != '[]' && needs.prep-testbed.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        executor-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ matrix.executor-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Pre-test script
        run: |
          if [[ -f "tests/pre_test.sh" ]]; then
            bash tests/pre_test.sh; fi
      - name: Install latest stable 2.x jina version
        run: |
          JINA_VERSION=$(curl -L -s "https://pypi.org/pypi/jina/json" \
            |  jq  -r '.releases | keys | .[]
              | select(contains("dev") | not)
              | select(startswith("2."))' \
            | sort -V | tail -1)
          pip install git+https://github.com/jina-ai/jina.git@v${JINA_VERSION}
      - name: Install image normalizer
        run: pip install git+https://github.com/jina-ai/executor-normalizer
      - name: Python requirements
        run: pip install -r requirements.txt -r tests/requirements.txt
      - name: Create Dockerfile, if needed
        run: |
          if [[ ! -f "Dockerfile" ]]; then
            normalizer . --jina-version=2; fi
      - name: Run unit tests
        run: pytest -s -v -m "not gpu"

  # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  # @@@@@@@ ⚠️ DEPRECATED ⚠️ @@@@@@@@@
  # @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  # This job should be removed once all executors are reformatted,
  # new way of testing docker files is directly with pytest, see
  # CONTRIBUTING.md in this repo

  docker-tests:
    needs: [prep-testbed]
    runs-on: ubuntu-latest
    if: ${{ needs.prep-testbed.outputs.matrix != '[]' && needs.prep-testbed.outputs.matrix != '' }}
    strategy:
      fail-fast: false
      matrix:
        executor-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: debug
        run: echo ${{ matrix.test-path }}
      - name: run docker tests
        run: |
          if [[ -f "${{ matrix.executor-path }}/Dockerfile" ]]; then
            bash ./scripts/test_docker.sh ${{ matrix.executor-path }}; fi

  # always run
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install requirements
        run: |
          pip install -r tests/requirements.txt
          export PYTHONPATH=.
      - name: Run integration tests
        run: pytest -s -v tests/integration
